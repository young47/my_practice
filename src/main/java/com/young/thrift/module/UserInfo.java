/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.young.thrift.module;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-28")
public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IMEI_FIELD_DESC = new org.apache.thrift.protocol.TField("imei", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PT_FIELD_DESC = new org.apache.thrift.protocol.TField("pt", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserInfoTupleSchemeFactory();

  public int token; // required
  public String imei; // required
  public String pt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    IMEI((short)2, "imei"),
    PT((short)3, "pt");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // IMEI
          return IMEI;
        case 3: // PT
          return PT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOKEN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMEI, new org.apache.thrift.meta_data.FieldMetaData("imei", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PT, new org.apache.thrift.meta_data.FieldMetaData("pt", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    int token,
    String imei,
    String pt)
  {
    this();
    this.token = token;
    setTokenIsSet(true);
    this.imei = imei;
    this.pt = pt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.token = other.token;
    if (other.isSetImei()) {
      this.imei = other.imei;
    }
    if (other.isSetPt()) {
      this.pt = other.pt;
    }
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    setTokenIsSet(false);
    this.token = 0;
    this.imei = null;
    this.pt = null;
  }

  public int getToken() {
    return this.token;
  }

  public UserInfo setToken(int token) {
    this.token = token;
    setTokenIsSet(true);
    return this;
  }

  public void unsetToken() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKEN_ISSET_ID);
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKEN_ISSET_ID);
  }

  public void setTokenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKEN_ISSET_ID, value);
  }

  public String getImei() {
    return this.imei;
  }

  public UserInfo setImei(String imei) {
    this.imei = imei;
    return this;
  }

  public void unsetImei() {
    this.imei = null;
  }

  /** Returns true if field imei is set (has been assigned a value) and false otherwise */
  public boolean isSetImei() {
    return this.imei != null;
  }

  public void setImeiIsSet(boolean value) {
    if (!value) {
      this.imei = null;
    }
  }

  public String getPt() {
    return this.pt;
  }

  public UserInfo setPt(String pt) {
    this.pt = pt;
    return this;
  }

  public void unsetPt() {
    this.pt = null;
  }

  /** Returns true if field pt is set (has been assigned a value) and false otherwise */
  public boolean isSetPt() {
    return this.pt != null;
  }

  public void setPtIsSet(boolean value) {
    if (!value) {
      this.pt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((Integer)value);
      }
      break;

    case IMEI:
      if (value == null) {
        unsetImei();
      } else {
        setImei((String)value);
      }
      break;

    case PT:
      if (value == null) {
        unsetPt();
      } else {
        setPt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case IMEI:
      return getImei();

    case PT:
      return getPt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case IMEI:
      return isSetImei();
    case PT:
      return isSetPt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_token = true;
    boolean that_present_token = true;
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (this.token != that.token)
        return false;
    }

    boolean this_present_imei = true && this.isSetImei();
    boolean that_present_imei = true && that.isSetImei();
    if (this_present_imei || that_present_imei) {
      if (!(this_present_imei && that_present_imei))
        return false;
      if (!this.imei.equals(that.imei))
        return false;
    }

    boolean this_present_pt = true && this.isSetPt();
    boolean that_present_pt = true && that.isSetPt();
    if (this_present_pt || that_present_pt) {
      if (!(this_present_pt && that_present_pt))
        return false;
      if (!this.pt.equals(that.pt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + token;

    hashCode = hashCode * 8191 + ((isSetImei()) ? 131071 : 524287);
    if (isSetImei())
      hashCode = hashCode * 8191 + imei.hashCode();

    hashCode = hashCode * 8191 + ((isSetPt()) ? 131071 : 524287);
    if (isSetPt())
      hashCode = hashCode * 8191 + pt.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImei()).compareTo(other.isSetImei());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImei()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imei, other.imei);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPt()).compareTo(other.isSetPt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pt, other.pt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("token:");
    sb.append(this.token);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imei:");
    if (this.imei == null) {
      sb.append("null");
    } else {
      sb.append(this.imei);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pt:");
    if (this.pt == null) {
      sb.append("null");
    } else {
      sb.append(this.pt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'token' because it's a primitive and you chose the non-beans generator.
    if (imei == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imei' was not present! Struct: " + toString());
    }
    if (pt == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pt' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.token = iprot.readI32();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMEI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imei = iprot.readString();
              struct.setImeiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pt = iprot.readString();
              struct.setPtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetToken()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeI32(struct.token);
      oprot.writeFieldEnd();
      if (struct.imei != null) {
        oprot.writeFieldBegin(IMEI_FIELD_DESC);
        oprot.writeString(struct.imei);
        oprot.writeFieldEnd();
      }
      if (struct.pt != null) {
        oprot.writeFieldBegin(PT_FIELD_DESC);
        oprot.writeString(struct.pt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.token);
      oprot.writeString(struct.imei);
      oprot.writeString(struct.pt);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.token = iprot.readI32();
      struct.setTokenIsSet(true);
      struct.imei = iprot.readString();
      struct.setImeiIsSet(true);
      struct.pt = iprot.readString();
      struct.setPtIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

